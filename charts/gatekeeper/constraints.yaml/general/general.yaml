---
# Source: general-gatekeeper-chart/templates/block-node-port.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sBlockNodePort
metadata:
  name: block-node-port
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Service"]
---
# Source: general-gatekeeper-chart/templates/external-ips.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sExternalIPs
metadata:
  name: disable-external-ips
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Service"]
---
# Source: general-gatekeeper-chart/templates/ingress-check-service.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sIngressService
metadata:
  name: ingress-check-service
spec:
  match:
    kinds:
      - apiGroups: ["extensions", "networking.k8s.io"]
        kinds: ["Ingress"]
---
# Source: general-gatekeeper-chart/templates/no-env-var-secrets.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sNoEnvVarSecrets
metadata:
  name: no-env-var-secret
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
---
# Source: general-gatekeeper-chart/templates/privilege-escalation.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPSPAllowPrivilegeEscalationContainer
metadata:
  name: privilege-escalation
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
---
# Source: general-gatekeeper-chart/templates/pods-security-context.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPodsRequireSecurityContext
metadata:
  name: pods-require-security-context
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
---
# Source: general-gatekeeper-chart/templates/role-wildcard.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sProhibitRoleWildcardAccess
metadata:
  name: prohibit-role-wildcard-access
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Role", "ClusterRole"]
---
# Source: general-gatekeeper-chart/templates/block-dynamic-ip.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredAnnotations
metadata:
  name: block-dynamic-ip
spec:
  match:
    kinds:
      - apiGroups: ["extensions", "networking.k8s.io"]
        kinds: ["Ingress"]
  parameters:
    message: "All Ingress must have static IP annotation" 
    annotations:
      - key: kubernetes.io/ingress.global-static-ip-name
        allowedRegex: .*
---
# Source: general-gatekeeper-chart/templates/block-k8s-external-lbs.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredAnnotations
metadata:
  name: block-k8s-external-lbs
spec:
  match:
    kinds:
      - apiGroups: ["extensions", "networking.k8s.io"]
        kinds: ["Service"]
  parameters:
    message: "All services must have a GKE internal load balancer class annotation." 
    annotations:
      - key: networking.gke.io/load-balancer-type
        allowedRegex: Internal
---
# Source: general-gatekeeper-chart/templates/ns-must-have-label.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredLabels
metadata:
  name: all-must-have-classification
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    message: "All namespaces must have an `classification` label"
    labels:
      - key: classification
---
# Source: general-gatekeeper-chart/templates/ns-must-have-label.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredLabels
metadata:
  name: all-must-have-configurationitem
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    message: "All namespaces must have an `configuration_item` label"
    labels:
      - key: configuration_item
---
# Source: general-gatekeeper-chart/templates/ns-must-have-label.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredLabels
metadata:
  name: all-must-have-pau
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    message: "All namespaces must have an `pau` label"
    labels:
      - key: pau
---
# Source: general-gatekeeper-chart/templates/ns-must-have-label.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredLabels
metadata:
  name: all-must-have-organization
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    message: "All namespaces must have an `organization` label"
    labels:
      - key: organization
---
# Source: general-gatekeeper-chart/templates/ns-must-have-label.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredLabels
metadata:
  name: all-must-have-billingproject
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    message: "All namespaces must have an `billing_project` label"
    labels:
      - key: billing_project
---
# Source: general-gatekeeper-chart/templates/ns-must-have-label.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredLabels
metadata:
  name: all-must-have-dataowner
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    message: "All namespaces must have an `data_owner` label"
    labels:
      - key: data_owner
---
# Source: general-gatekeeper-chart/templates/restrict-namespaces.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRestrictNamespaces
metadata:
  name: restrict-namespace
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Namespace"]
  parameters:
    restrictedNamespaces: 
      - "default"
      - "kube-public"
      - "config-management-system"
      - "config-management-monitoring"
      - "cnrm-system"
      - "configconnector-operator-system"
      - "gatekeeper-system"
      - "kube-system"
      - "kube-node-lease"
      - "resource-group-system"
      - "twistlock"
---
# Source: general-gatekeeper-chart/templates/restrict-role-bindings.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRestrictRoleBindings
metadata:
  name: restrict-role-binding
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["RoleBinding"]
  parameters:
      restrictedRole: 
        name: "admin"
---
# Source: general-gatekeeper-chart/templates/block-insecure-backend-config.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sSecureBackend
metadata:
  name: block-insecure-backend-config
spec:
  match:
    kinds:
      - apiGroups: ["cloud.google.com"]
        kinds: ["BackendConfig"]
---
# Source: general-gatekeeper-chart/templates/service-check-ingress.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sServiceIngress
metadata:
  name: service-check-ingress
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Service"]
---
# Source: general-gatekeeper-chart/templates/unique-ingress-host.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sUniqueIngressHost
metadata:
  name: unique-ingress-host
spec:
  match:
    kinds:
      - apiGroups: ["extensions", "networking.k8s.io"]
        kinds: ["Ingress"]
---
# Source: general-gatekeeper-chart/templates/unique-service.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sUniqueServiceSelector
metadata:
  name: unique-service-selector
spec:
  match:
    kinds:
      - apiGroups: ["extensions", "networking.k8s.io"]
        kinds: ["Service"]
